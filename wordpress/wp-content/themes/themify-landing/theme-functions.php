<?php
/***************************************************************************
 *  					Theme Functions
 * 	----------------------------------------------------------------------
 * 						DO NOT EDIT THIS FILE
 *	----------------------------------------------------------------------
 * 
 *  					Copyright (C) Themify
 * 						http://themify.me
 *
 *  To add custom PHP functions to the theme, create a new 'custom-functions.php' file in the theme folder.
 *  They will be added to the theme automatically.
 * 
 ***************************************************************************/

/////// Actions ////////
// Init post, page and additional post types if they exist
add_action( 'after_setup_theme', 'themify_theme_init_types' );

// Enqueue scripts and styles required by theme
add_action( 'wp_enqueue_scripts', 'themify_theme_enqueue_scripts', 11 );

// Browser compatibility
add_action( 'wp_head', 'themify_ie_enhancements' );
add_action( 'wp_head', 'themify_viewport_tag' );
add_action( 'wp_head', 'themify_ie_standards_compliant');

if( themify_get( 'setting-disable_responsive_design' ) == 'on' ) {
	add_action( 'init', 'themify_disable_responsive_design' );
}

// Register custom menu
add_action( 'init', 'themify_register_custom_nav');

// Register sidebars
add_action( 'widgets_init', 'themify_theme_register_sidebars' );

/////// Filters ////////
add_filter( 'themify_parallax_header', 'themify_disable_parallax_header_on_mobile' );

// Set class on body tag according to layout width
add_filter( 'body_class', 'themify_theme_body_class', 99 );

/**
 * Enqueue Stylesheets and Scripts
 * @since 1.0.0
 */
function themify_theme_enqueue_scripts(){

	// Get theme version for Themify theme scripts and styles
	$theme_version = wp_get_theme()->display('Version');

	///////////////////
	//Enqueue styles
	///////////////////

	// Google Web Fonts embedding
	wp_enqueue_style( 'google-fonts', themify_https_esc('http://fonts.googleapis.com/css'). '?family=Oswald:400,700|Crimson+Text:700italic,400,700,400italic&subset=latin,latin-ext');

	// Themify Icons
	wp_enqueue_style( 'themify-icons', THEME_URI . '/themify/themify-icons/themify-icons.css', array(), $theme_version);

	// Themify base styling
	wp_enqueue_style( 'theme-style', get_stylesheet_uri(), array(), $theme_version);

	// Themify Media Queries CSS
	wp_enqueue_style( 'themify-media-queries', THEME_URI . '/media-queries.css', array(), $theme_version);

	///////////////////
	//Enqueue scripts
	///////////////////

	// Slide mobile navigation menu
	wp_enqueue_script( 'slide-nav', THEMIFY_URI . '/js/themify.sidemenu' . themify_minified() . '.js', array( 'jquery' ), $theme_version, true );

	// Masonry layout
	wp_enqueue_script( 'themify-isotope', THEME_URI . '/js/jquery.isotope.min.js', array(), $theme_version, true );

	// Themify internal scripts
	wp_enqueue_script( 'theme-script',	THEME_URI . '/js/themify.script.js', array('jquery'), $theme_version, true );

	// Themify Gallery
	wp_enqueue_script( 'themify-gallery', THEMIFY_URI . '/js/themify.gallery.js', array('jquery'), false, true );

	// Prepare JS variables
	$themify_script_vars = array(
		'lightbox' => themify_lightbox_vars_init(),
		'lightboxContext' => apply_filters('themify_lightbox_context', '#pagewrap'),
		'isTouch' => themify_is_touch()? 'true': 'false',
		'fixedHeader' => themify_theme_fixed_header(),
		'ajax_nonce'  => wp_create_nonce('ajax_nonce'),
		'ajax_url'	  => admin_url( 'admin-ajax.php' ),
		// Screen size at which horizontal menu is moved into side panel
		'smallScreen' => '760',
		// Resize refresh rate
		'resizeRefresh' => '250',
		'parallaxHeader' => apply_filters( 'themify_parallax_header', true ),
	);

	// Pass variable values to JavaScript
	wp_localize_script( 'theme-script', 'themifyScript', apply_filters('themify_script_vars', $themify_script_vars ) );
	
	// WordPress internal script to move the comment box to the right place when replying to a user
	if ( is_single() || is_page() ) wp_enqueue_script( 'comment-reply' );
}

/**
 * Logic for fixed header. Checks, if it applies, custom fields first and then theme settings.
 *
 * @since 1.0.0
 *
 * @return string
 */
function themify_theme_fixed_header() {
	if ( is_singular( array( 'post', 'page', 'portfolio', 'event' ) ) ) {
		$fixed_header_field = themify_get( 'fixed_header' );
		if ( 'yes' == $fixed_header_field ) {
			return 'fixed-header';
		} elseif ( 'no' == $fixed_header_field ) {
			return '';
		}
	}
	return themify_check( 'setting-fixed_header_disabled' ) ? '' : 'fixed-header';
}

/**
 * Disable Parallax header on mobile devices
 * @param bool $bool 
 * @return bool
 */
function themify_disable_parallax_header_on_mobile( $bool ) {
	if ( themify_is_touch() ) $bool = false;
	return $bool;
}

/**
 * Add JavaScript files if IE version is lower than 9
 * @since 1.0.0
 */
function themify_ie_enhancements() {
	echo "\n".'
	<!-- media-queries.js -->
	<!--[if lt IE 9]>
		<script src="' . THEME_URI . '/js/respond.js"></script>
	<![endif]-->
	
	<!-- html5.js -->
	<!--[if lt IE 9]>
		<script src="'.themify_https_esc('http://html5shim.googlecode.com/svn/trunk/html5.js').'"></script>
	<![endif]-->
	'."\n";
}

/**
 * Add viewport tag for responsive layouts
 * @since 1.0.0
 */
function themify_viewport_tag() {
	echo "\n".'<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no">'."\n";
}

/**
 * Make IE behave like a standards-compliant browser
 * @since 1.0.0 
 */
function themify_ie_standards_compliant() {
	echo "\n".'
	<!--[if lt IE 9]>
	<script src="'.themify_https_esc('http://s3.amazonaws.com/nwapi/nwmatcher/nwmatcher-1.2.5-min.js').'"></script>
	<script type="text/javascript" src="'.themify_https_esc('http://cdnjs.cloudflare.com/ajax/libs/selectivizr/1.0.2/selectivizr-min.js').'"></script> 
	<![endif]-->
	'."\n";
}

/* Custom Write Panels
/***************************************************************************/

///////////////////////////////////////
// Build Write Panels
///////////////////////////////////////

if ( ! function_exists( 'themify_theme_init_types' ) ) {
	/**
	 * Initialize custom panel with its definitions
	 * Custom panel definitions are located in admin/post-type-TYPE.php
	 * @since 1.0.0
	 */
	function themify_theme_init_types() {
		// Load required files for post, page and custom post types where it applies
		foreach ( array( 'post', 'page', 'event', 'portfolio' ) as $type ) {
			require_once( "admin/post-type-$type.php" );
		}
		/**
		 * Navigation menus used in page custom panel to specify a custom menu for the page.
		 * @var array
		 * @since 1.2.7
		 */
		$nav_menus = array(	array( 'name' => '', 'value' => '', 'selected' => true ) );
		foreach ( get_terms( 'nav_menu' ) as $menu ) {
			$nav_menus[] = array( 'name' => $menu->name, 'value' => $menu->slug );
		}

		themify_build_write_panels( apply_filters( 'themify_theme_meta_boxes', array(
			array(
				'name'    => __( 'Post Options', 'themify' ),
				'id'      => 'post-options',
				'options' => themify_theme_post_meta_box( array( 'nav_menus' => $nav_menus ) ),
				'pages'   => 'post'
			),
			array(
				'name'    => __( 'Page Options', 'themify' ),
				'id'      => 'page-options',
				'options' => themify_theme_page_meta_box( array( 'nav_menus' => $nav_menus ) ),
				'pages'   => 'page'
			),
			array(
				'name'    => __( 'Portfolio Options', 'themify' ),
				'id'      => 'portfolio-options',
				'options' => themify_theme_portfolio_meta_box( array( 'nav_menus' => $nav_menus ) ),
				'pages'   => 'portfolio'
			),
			array(
				'name'    => __( 'Event Options', 'themify' ),
				'id'      => 'event-options',
				'options' => themify_theme_event_meta_box( array( 'nav_menus' => $nav_menus ) ),
				'pages'   => 'event'
			),
			array(
				'name'    => __( 'Query Posts', 'themify' ),
				'id'      => 'query-posts',
				'options' => themify_theme_query_post_meta_box(),
				'pages'   => 'page'
			),
			array(
				'name'    => __( 'Query Portfolios', 'themify' ),
				'id'      => 'query-portfolio',
				'options' => themify_theme_query_portfolio_meta_box(),
				'pages'   => 'page'
			),
			array(
				'name'    => __( 'Query Events', 'themify' ),
				'id'      => 'query-event',
				'options' => themify_theme_query_event_meta_box(),
				'pages'   => 'page'
			),
		)));
	}
}

/* Custom Functions
/***************************************************************************/	

///////////////////////////////////////
// Enable WordPress feature image
///////////////////////////////////////
add_theme_support( 'post-thumbnails' );
remove_post_type_support( 'page', 'thumbnail' );

if ( ! function_exists( 'themify_register_custom_nav' ) ) {
	/**
	 * Register Custom Menu Function
	 * @since 1.0.0
	 */
	function themify_register_custom_nav() {
		register_nav_menus( array(
			'main-nav' => __( 'Main Navigation', 'themify' ),
		));
	}
}

if ( ! function_exists( 'themify_default_main_nav' ) ) {
	/**
	 * Default Main Nav Function
	 * @since 1.0.0
	 */
	function themify_default_main_nav() {
		echo '<ul id="main-nav" class="main-nav clearfix">';
			wp_list_pages('title_li=');
		echo '</ul>';
	}
}

/**
 * Sets custom menu selected in page custom panel as navigation, otherwise sets the default.
 *
 * @since 1.0.0
 */
function themify_theme_menu_nav() {
	$custom_menu = themify_get( 'custom_menu' );
	if ( isset( $custom_menu ) && '' != $custom_menu ) {
		wp_nav_menu( array(
			'menu' => $custom_menu,
			'fallback_cb' => 'themify_default_main_nav',
			'container' => '',
			'menu_id' => 'main-nav',
			'menu_class' => 'main-nav'
		));
	} else {
		wp_nav_menu( array(
			'theme_location' => 'main-nav',
			'fallback_cb'    => 'themify_default_main_nav',
			'container'      => '',
			'menu_id'        => 'main-nav',
			'menu_class'     => 'main-nav'
		));
	}
}

if ( ! function_exists( 'themify_theme_register_sidebars' ) ) {
	/**
	 * Register sidebars
	 * @since 1.0.0
	 */
	function themify_theme_register_sidebars() {
		$sidebars = array(
			array(
				'name' => __('Sidebar', 'themify'),
				'id' => 'sidebar-main',
				'before_widget' => '<div id="%1$s" class="widget %2$s">',
				'after_widget' => '</div>',
				'before_title' => '<h4 class="widgettitle">',
				'after_title' => '</h4>',
			),
			array(
				'name' => __('Social Widget', 'themify'),
				'id' => 'social-widget',
				'before_widget' => '<div id="%1$s" class="widget %2$s">',
				'after_widget' => '</div>',
				'before_title' => '<strong class="widgettitle">',
				'after_title' => '</strong>',
			)
		);
		foreach( $sidebars as $sidebar ) {
			register_sidebar( $sidebar );
		}

		// Footer Sidebars
		themify_register_grouped_widgets();
	}
}

if ( ! function_exists( 'themify_theme_comment' ) ) {
	/**
	 * Custom Theme Comment
	 * @param object $comment Current comment.
	 * @param array $args Parameters for comment reply link.
	 * @param int $depth Maximum comment nesting depth.
	 */
	function themify_theme_comment( $comment, $args, $depth ) {
	   $GLOBALS['comment'] = $comment; ?>

		<li id="comment-<?php comment_ID() ?>" <?php comment_class(); ?>>
			<p class="comment-author">
				<?php echo get_avatar( $comment, $size = '75' ); ?>
				<cite><?php echo get_comment_author_link(); ?></cite>
				<br/>
				<small class="comment-time">
					<?php comment_date( apply_filters('themify_comment_date', '') ); ?>
					 @
					<?php comment_time( apply_filters('themify_comment_time', '') ); ?>
					<?php edit_comment_link( __('Edit', 'themify'),' [',']'); ?>
				</small>
			</p>
			<div class="commententry">
				<?php if ($comment->comment_approved == '0') : ?>
					<p><em><?php _e('Your comment is awaiting moderation.', 'themify') ?></em></p>
				<?php endif; ?>
				<?php comment_text(); ?>
			</div>
			<p class="reply">
				<?php comment_reply_link(array_merge( $args, array('add_below' => 'comment', 'depth' => $depth, 'reply_text' => __( 'Reply', 'themify' ), 'max_depth' => $args['max_depth']))) ?>
			</p>
		<?php
	}
}

if ( ! function_exists( 'themify_theme_has_submenu' ) ) {
	/**
	 * Sets custom class if menu item has a submenu.
	 * @param array $sorted_menu_items The menu items to filter.
	 * @return array The filtered menu items.
	 * @since 1.0.0
	 */
	function themify_theme_has_submenu( $sorted_menu_items ) {
		$last_top = 0;
		foreach ( $sorted_menu_items as $key => $obj ) {
			if ( 0 == $obj->menu_item_parent ) {
				$last_top = $key;
			} else {
				$sorted_menu_items[$last_top]->classes['has-sub-menu'] = 'has-sub-menu';
			}
		}
		return $sorted_menu_items;
	}
	add_filter( 'wp_nav_menu_objects', 'themify_theme_has_submenu', 10 );
}

if ( ! function_exists( 'themify_theme_custom_post_css' ) ) {
	/**
	 * Outputs custom post CSS at the end of a post
	 * @since 1.0.0
	 */
	function themify_theme_custom_post_css() {
		global $themify;
		if ( in_array( get_post_type(), array( 'post', 'page', 'event', 'portfolio' ) ) ) {
			$post_id = get_the_ID();
			if ( is_page() ) {
				$entry_id = '.page-id-' . $post_id;
			} else {
				$entry_id = '.postid-' . $post_id;
			}
			$headerwrap = $entry_id . ' #headerwrap';
			$site_logo = $entry_id . ' #site-logo';
			$site_description = $entry_id . ' #site-description';
			$main_nav = $entry_id . ' #main-nav';
			$social_widget = $entry_id . ' .social-widget';
			$css = array();
			$style = '';
			$rules = array();

			if ( 'transparent' != themify_get( 'header_wrap' ) ) {
				$rules = array(
					$headerwrap => array(
						array(
							'prop' => 'background-color',
							'key'  => 'background_color'
						),
						array(
							'prop' => 'background-image',
							'key'  => 'background_image'
						),
						array(
							'prop' => 'background-repeat',
							'key'  => 'background_repeat'
						),
					),
					"$entry_id #site-logo span:after, $entry_id #headerwrap #searchform, $entry_id #main-nav .current_page_item a, $entry_id #main-nav .current-menu-item a" => array(
							array(
								'prop' => 'border-color',
								'key'  => 'headerwrap_text_color'
							),
					),
				);
			}

			$rules["$headerwrap, $site_logo, $site_description"] = array(
				array(
					'prop' => 'color',
					'key'  => 'headerwrap_text_color'
				),
			);

			$rules["$site_logo a, $site_description a, $social_widget a, $main_nav > li > a"] = array(
				array(
					'prop' => 'color',
					'key'  => 'headerwrap_link_color'
				),
			);

			if ( is_singular( array( 'portfolio', 'event' ) ) ) {
				$rules['.postid-' . $post_id . ' .featured-area'] =	array(
					array(	'prop' => 'background-color',
							'key' => 'featured_area_background_color'
					),
					array(	'prop' => 'background-image',
							'key' => 'featured_area_background_image'
					),
					array(	'prop' => 'background-repeat',
							'key' => 'featured_area_background_repeat'
					),
				);
				$rules['.postid-' . $post_id . ' .portfolio-post-wrap, .postid-' . $post_id . ' .portfolio-post-wrap .post-date'] = array(
					array(	'prop' => 'color',
							'key' => 'featured_area_text_color'
					),
				);
				$rules['.postid-' . $post_id . ' .portfolio-post-wrap a'] =	array(
					array(	'prop' => 'color',
							'key' => 'featured_area_link_color'
					),
				);
			}

			foreach ( $rules as $selector => $property ) {
				foreach ( $property as $val ) {
					$prop = $val['prop'];
					$key = $val['key'];
					if ( is_array( $key ) ) {
						if ( $prop == 'font-size' && themify_check( $key[0] ) ) {
							$css[$selector][$prop] = $prop . ': ' . themify_get( $key[0] ) . themify_get( $key[1] );
						}
					} elseif ( themify_check( $key ) && 'default' != themify_get( $key ) ) {
						if ( $prop == 'color' || stripos( $prop, 'color' ) ) {
							$css[$selector][$prop] = $prop . ': #' . themify_get( $key );
						}
						elseif ( $prop == 'background-image' && 'default' != themify_get( $key ) ) {
							$css[$selector][$prop] = $prop .': url(' . themify_get( $key ) . ')';
						}
						elseif ( $prop == 'background-repeat' && 'fullcover' == themify_get( $key ) ) {
							$css[$selector]['background-size'] = 'background-size: cover';
						}
						elseif ( $prop == 'font-family' ) {
							$font = themify_get( $key );
							$css[$selector][$prop] = $prop .': '. $font;
							if ( ! in_array( $font, themify_get_web_safe_font_list( true ) ) ) {
								$themify->google_fonts .= str_replace( ' ', '+', $font.'|' );
							}
						}
						else {
							$css[$selector][$prop] = $prop .': '. themify_get( $key );
						}
					}
				}
				if ( ! empty( $css[$selector] ) ) {
					$style .= "$selector {\n\t" . implode( ";\n\t", $css[$selector] ) . "\n}\n";
				}
			}

			if ( '' != $style ) {
				echo "\n<!-- Entry Style -->\n<style>\n$style</style>\n<!-- End Entry Style -->\n";
			}
		}
	}
	add_action( 'wp_head', 'themify_theme_custom_post_css', 77 );
}

if ( ! function_exists( 'themify_theme_featured_area_style' ) ) {
	/**
	 * Returns the background repeat style as a class.
	 *
	 * @return mixed|string
	 */
	function themify_theme_featured_area_style() {
		return themify_check( 'background_repeat' ) ? themify_get( 'background_repeat' ) : '';
	}
}

if ( ! function_exists( 'themify_theme_entry_title_tag' ) ) {
	/**
	 * Displays the entry title tag, outputting h1 for singular views and h2 otherwise.
	 *
	 * @since 1.0.6
	 *
	 * @return string
	 */
	function themify_theme_entry_title_tag() {
		global $themify;
		if ( is_singular() ) {
			if ( isset( $themify->is_shortcode ) ) {
				$tag = 'h2';
			} else {
				$tag = 'h1';
			}
		} else {
			$tag = 'h2';
		}

		echo apply_filters( 'themify_entry_title_tag', $tag );
	}
}

if ( ! function_exists( 'themify_theme_body_class' ) ) {
	/**
	 * Adds body classes for special theme features.
	 *
	 * @param $classes
	 *
	 * @return array
	 */
	function themify_theme_body_class( $classes ) {
		// Add transparent-header class to body if user selected it in custom panel
		if ( ( is_single() || is_page() ) && 'transparent' == themify_get( 'header_wrap' ) ) {
			$classes[] = 'transparent-header';
		}
		// Header Design
		$header = themify_area_design( 'header' );
		$classes[] = 'none' == $header ? 'header-none' : $header;

		return $classes;
	}
}

if ( ! function_exists( 'themify_theme_show_area' ) ) {
	/**
	 * Checks whether to show a certain layout area or not.
	 *
	 * @param string $area
	 *
	 * @return bool
	 */
	function themify_theme_show_area( $area = '' ) {
		if ( 'header' == $area ) {
			return 'none' == themify_area_design( 'header' ) ? false : true;
		} else {
			if ( is_singular() && ! is_attachment() ) {
				$exclude = themify_get( 'exclude_' . $area );
				if ( 'yes' == $exclude ) {
					return false;
				} elseif ( 'no' == $exclude ) {
					return true;
				} else {
					return themify_check( 'setting-exclude_' . $area ) ? false : true;
				}
			} elseif ( themify_check( 'setting-exclude_' . $area ) ) {
				return false;
			}
		}

		return true;
	}
}

if ( ! function_exists( 'themify_theme_do_not_exclude_all' ) ) {
	/**
	 * Checks if all the elements in a certain area have been excluded.
	 *
	 * @param string $area
	 *
	 * @return bool
	 */
	function themify_theme_do_not_exclude_all( $area = 'header' ) {
		if ( 'mobile-menu' == $area ) {
			return themify_theme_show_area( 'search_form' ) || themify_theme_show_area( 'social_widget' ) || themify_theme_show_area( 'rss' ) || themify_theme_show_area( 'menu_navigation' );
		} elseif ( 'header' == $area ) {
			return themify_theme_show_area( 'site_logo' ) || themify_theme_show_area( 'site_tagline' ) || themify_theme_show_area( 'search_form' ) || themify_theme_show_area( 'social_widget' ) || themify_theme_show_area( 'rss' ) || themify_theme_show_area( 'menu_navigation' );
		}
		return false;
	}
}

/**
 * Set the fixed-header selector for the scroll highlight script
 *
 * @since 1.1.3
 */
function themify_theme_scroll_highlight_vars( $vars ) {
	$vars['fixedHeaderSelector'] = '#headerwrap.fixed-header';
	return $vars;
}
add_filter( 'themify_builder_scroll_highlight_vars', 'themify_theme_scroll_highlight_vars' );